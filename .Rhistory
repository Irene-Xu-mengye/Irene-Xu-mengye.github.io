names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
ylab = ' \n '
} else if (this_sample == 'GluCog' & v == 1){ #glucog ema
dsc_rename = which(grepl('dsc_', names(this_data)))
names(this_data)[dsc_rename] = gsub('dsc_', replacement = 'dsm_', names(this_data)[dsc_rename])
if (REMOVE_FLAGGED){
vars2get = c('mot_correct_ema_mean_postQC', 'dsm_medianRTc_ema_mean_postQC_reversed', 'gradcpt_dprime_ema_mean_postQC')
} else {
vars2get = c('mot_correct_ema_mean', 'dsm_medianRTc_ema_mean_reversed', 'gradcpt_dprime_ema_mean')
}
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime')
ylab = 'EMA\nStandardized Performance'
}  else if (this_sample == 'GluCog' & v == 2){ #glucog baseline
vars2get = c('mot_correct', 'dsm_medianRTc_reversed', 'gradcpt_dprime', 'crt_medianRTc_reversed', 'vocab_accuracy')
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
ylab = 'Baseline\nStandardized Performance'
}
#reverse score RT outcomes for calculating correlations
this_data$crt_medianRTc_reversed = -1*this_data$crt_medianRTc
this_data$dsm_medianRTc_reversed = -1*this_data$dsm_medianRTc
if (this_sample == 'MoodCog'){
if (REMOVE_FLAGGED){
this_data$crt_medianRTc_ema_mean_postQC_reversed = -1*this_data$crt_medianRTc_ema_mean_postQC
} else {
this_data$crt_medianRTc_ema_mean_reversed = -1*this_data$crt_medianRTc_ema_mean
}
}
if (REMOVE_FLAGGED){
this_data$dsm_medianRTc_ema_mean_postQC_reversed = -1*this_data$dsm_medianRTc_ema_mean_postQC
} else {
this_data$dsm_medianRTc_ema_mean_reversed = -1*this_data$dsm_medianRTc_ema_mean
}
#this_data$gradcpt_medianRTc_ema_mean_reversed = -1*this_data$gradcpt_medianRTc_ema_mean
age_data = NULL
for (i in 1:length(vars2get)){
this_outcome = vars2get[i]
tmp = this_data[c(this_outcome, 'demo_age')]
tmp[this_outcome] = scale(tmp[this_outcome])
tmp$outcome = names4vars[i]
names(tmp) = c('performance', 'age', 'outcome')
if (grepl('crt|CRT', this_outcome)){
tmp$linetype = '2'
} else {
tmp$linetype = '1'
}
age_data = rbind(age_data, tmp)
}
age_data$outcome = age_data$outcome = factor(age_data$outcome, levels = all_factor_levels)
# if (v == 1){#if ema
#   age_data$outcome = factor(age_data$outcome, levels = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc'))
# } else {#in baseline
#   age_data$outcome = factor(age_data$outcome, levels = names4vars)
# }
age_data$age_z = scale(age_data$age)
z20 = unique(age_data$age_z[age_data$age == 20])
z30 = unique(age_data$age_z[age_data$age == 30])
z80 = z20 + 6*(z30-z20)
z70 = z20 + 5*(z30-z20)
z75 = z20 + 5.5*(z30-z20)
z85 = z80 + .5*(z30-z20)
z18 = z20 - .2*(z30-z20)
breaks = seq(z20, z80, z30-z20)
#axes limits
if (s == 1){
ylim = c(-2, 1.5)
xlim = c(z18, z85)
} else if (s == 2){
ylim = c(-2, 1.5)
xlim = c(z18, z75)
}
#xlabel
if (v == 1){
xlab = 'Age'
this_title = ''
} else {
xlab = ''
this_title = this_sample
}
age_plots[[plot_count]] = ggplot(age_data, aes(x=age_z, y=performance, color = outcome, linetype = linetype)) +
ggtitle(this_title) +
ggpmisc::stat_correlation(size = 2.6,
label.x = 0.4, aes(label = paste0(after_stat(cor.value), "*\", \"*",
after_stat(p.value))),
small.r = T, small.p = T, p.digits = 2) +
geom_smooth(fill = 'lightgray', method = "lm", level = .95, se = F) +
theme(plot.title = element_text(hjust = 0.5, size = 11),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.title = element_blank(),
axis.text.x = element_text(size=9),
axis.text.y = element_text(size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.line.y = element_line(colour = "black"), axis.line.x = element_line(colour = "black")) +
xlab(xlab) +
#scale_colour_discrete(drop = FALSE) +
scale_color_manual(values=color_options, drop = FALSE) +
scale_linetype_manual(values = c(1, 2), drop = FALSE) +
coord_fixed(ylim = ylim, xlim = xlim) +
scale_x_continuous(breaks = breaks, labels =c(20,30,40,50,60,70,80)) +
ylab(ylab) + guides(linetype = "none")
}
}
(age_plots[[2]] + age_plots[[4]]) / (age_plots[[1]] + age_plots[[3]]) + plot_layout(guides = "collect") & theme(legend.position = "right")
age_plots = list()
plot_count = 0
all_factor_levels = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
for (s in 1:length(samples)){
this_sample = samples[s]
this_data = subject_data[[this_sample]]
for (v in 1:2){ #separate for EMA and baseline
plot_count = plot_count + 1
if (this_sample == 'MoodCog' & v == 1){ #moodcog EMA
if (REMOVE_FLAGGED){
vars2get = c('mot_correct_ema_mean_postQC', 'dsm_medianRTc_ema_mean_postQC_reversed', 'gradcpt_dprime_ema_mean_postQC', 'crt_medianRTc_ema_mean_postQC_reversed')
} else {
vars2get = c('mot_correct_ema_mean', 'dsm_medianRTc_ema_mean_reversed', 'gradcpt_dprime_ema_mean', 'crt_medianRTc_ema_mean_reversed')
}
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc')
ylab = ' \n '
} else if (this_sample == 'MoodCog' & v == 2){ #moodcog baseline
vars2get = c('mot_correct', 'dsm_medianRTc_reversed', 'gradcpt_dprime', 'crt_medianRTc_reversed', 'vocab_accuracy')
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
ylab = ' \n '
} else if (this_sample == 'GluCog' & v == 1){ #glucog ema
dsc_rename = which(grepl('dsc_', names(this_data)))
names(this_data)[dsc_rename] = gsub('dsc_', replacement = 'dsm_', names(this_data)[dsc_rename])
if (REMOVE_FLAGGED){
vars2get = c('mot_correct_ema_mean_postQC', 'dsm_medianRTc_ema_mean_postQC_reversed', 'gradcpt_dprime_ema_mean_postQC')
} else {
vars2get = c('mot_correct_ema_mean', 'dsm_medianRTc_ema_mean_reversed', 'gradcpt_dprime_ema_mean')
}
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime')
ylab = 'EMA\nStandardized Performance'
}  else if (this_sample == 'GluCog' & v == 2){ #glucog baseline
vars2get = c('mot_correct', 'dsm_medianRTc_reversed', 'gradcpt_dprime', 'crt_medianRTc_reversed', 'vocab_accuracy')
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
ylab = 'Baseline\nStandardized Performance'
}
#reverse score RT outcomes for calculating correlations
this_data$crt_medianRTc_reversed = -1*this_data$crt_medianRTc
this_data$dsm_medianRTc_reversed = -1*this_data$dsm_medianRTc
if (this_sample == 'MoodCog'){
if (REMOVE_FLAGGED){
this_data$crt_medianRTc_ema_mean_postQC_reversed = -1*this_data$crt_medianRTc_ema_mean_postQC
} else {
this_data$crt_medianRTc_ema_mean_reversed = -1*this_data$crt_medianRTc_ema_mean
}
}
if (REMOVE_FLAGGED){
this_data$dsm_medianRTc_ema_mean_postQC_reversed = -1*this_data$dsm_medianRTc_ema_mean_postQC
} else {
this_data$dsm_medianRTc_ema_mean_reversed = -1*this_data$dsm_medianRTc_ema_mean
}
#this_data$gradcpt_medianRTc_ema_mean_reversed = -1*this_data$gradcpt_medianRTc_ema_mean
age_data = NULL
for (i in 1:length(vars2get)){
this_outcome = vars2get[i]
tmp = this_data[c(this_outcome, 'demo_age')]
tmp[this_outcome] = scale(tmp[this_outcome])
tmp$outcome = names4vars[i]
names(tmp) = c('performance', 'age', 'outcome')
if (grepl('crt|CRT', this_outcome)){
tmp$linetype = '2'
} else {
tmp$linetype = '1'
}
age_data = rbind(age_data, tmp)
}
age_data$outcome = age_data$outcome = factor(age_data$outcome, levels = all_factor_levels)
# if (v == 1){#if ema
#   age_data$outcome = factor(age_data$outcome, levels = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc'))
# } else {#in baseline
#   age_data$outcome = factor(age_data$outcome, levels = names4vars)
# }
age_data$age_z = scale(age_data$age)
z20 = unique(age_data$age_z[age_data$age == 20])
z30 = unique(age_data$age_z[age_data$age == 30])
z80 = z20 + 6*(z30-z20)
z70 = z20 + 5*(z30-z20)
z75 = z20 + 5.5*(z30-z20)
z85 = z80 + .5*(z30-z20)
z18 = z20 - .2*(z30-z20)
breaks = seq(z20, z80, z30-z20)
#axes limits
if (s == 1){
ylim = c(-2, 1.5)
xlim = c(z18, z85)
} else if (s == 2){
ylim = c(-2, 1.5)
xlim = c(z18, z75)
}
#xlabel
if (v == 1){
xlab = 'Age'
this_title = ''
} else {
xlab = ''
this_title = this_sample
}
age_plots[[plot_count]] = ggplot(age_data, aes(x=age_z, y=performance, color = outcome, linetype = linetype)) +
ggtitle(this_title) +
ggpmisc::stat_correlation(size = 2.6,
label.x = 0.4, aes(label = paste0(after_stat(cor.label), "*\", \"*",
after_stat(p.value))),
small.r = T, small.p = T, p.digits = 2) +
geom_smooth(fill = 'lightgray', method = "lm", level = .95, se = F) +
theme(plot.title = element_text(hjust = 0.5, size = 11),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.title = element_blank(),
axis.text.x = element_text(size=9),
axis.text.y = element_text(size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.line.y = element_line(colour = "black"), axis.line.x = element_line(colour = "black")) +
xlab(xlab) +
#scale_colour_discrete(drop = FALSE) +
scale_color_manual(values=color_options, drop = FALSE) +
scale_linetype_manual(values = c(1, 2), drop = FALSE) +
coord_fixed(ylim = ylim, xlim = xlim) +
scale_x_continuous(breaks = breaks, labels =c(20,30,40,50,60,70,80)) +
ylab(ylab) + guides(linetype = "none")
}
}
(age_plots[[2]] + age_plots[[4]]) / (age_plots[[1]] + age_plots[[3]]) + plot_layout(guides = "collect") & theme(legend.position = "right")
#ggsave("Figures_updated/figure6_age_with_stats.png", plot=last_plot(), width=9, height=6)
age_plots = list()
plot_count = 0
all_factor_levels = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
for (s in 1:length(samples)){
this_sample = samples[s]
this_data = subject_data[[this_sample]]
for (v in 1:2){ #separate for EMA and baseline
plot_count = plot_count + 1
if (this_sample == 'MoodCog' & v == 1){ #moodcog EMA
if (REMOVE_FLAGGED){
vars2get = c('mot_correct_ema_mean_postQC', 'dsm_medianRTc_ema_mean_postQC_reversed', 'gradcpt_dprime_ema_mean_postQC', 'crt_medianRTc_ema_mean_postQC_reversed')
} else {
vars2get = c('mot_correct_ema_mean', 'dsm_medianRTc_ema_mean_reversed', 'gradcpt_dprime_ema_mean', 'crt_medianRTc_ema_mean_reversed')
}
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc')
ylab = ' \n '
} else if (this_sample == 'MoodCog' & v == 2){ #moodcog baseline
vars2get = c('mot_correct', 'dsm_medianRTc_reversed', 'gradcpt_dprime', 'crt_medianRTc_reversed', 'vocab_accuracy')
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
ylab = ' \n '
} else if (this_sample == 'GluCog' & v == 1){ #glucog ema
dsc_rename = which(grepl('dsc_', names(this_data)))
names(this_data)[dsc_rename] = gsub('dsc_', replacement = 'dsm_', names(this_data)[dsc_rename])
if (REMOVE_FLAGGED){
vars2get = c('mot_correct_ema_mean_postQC', 'dsm_medianRTc_ema_mean_postQC_reversed', 'gradcpt_dprime_ema_mean_postQC')
} else {
vars2get = c('mot_correct_ema_mean', 'dsm_medianRTc_ema_mean_reversed', 'gradcpt_dprime_ema_mean')
}
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime')
ylab = 'EMA\nStandardized Performance'
}  else if (this_sample == 'GluCog' & v == 2){ #glucog baseline
vars2get = c('mot_correct', 'dsm_medianRTc_reversed', 'gradcpt_dprime', 'crt_medianRTc_reversed', 'vocab_accuracy')
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
ylab = 'Baseline\nStandardized Performance'
}
#reverse score RT outcomes for calculating correlations
this_data$crt_medianRTc_reversed = -1*this_data$crt_medianRTc
this_data$dsm_medianRTc_reversed = -1*this_data$dsm_medianRTc
if (this_sample == 'MoodCog'){
if (REMOVE_FLAGGED){
this_data$crt_medianRTc_ema_mean_postQC_reversed = -1*this_data$crt_medianRTc_ema_mean_postQC
} else {
this_data$crt_medianRTc_ema_mean_reversed = -1*this_data$crt_medianRTc_ema_mean
}
}
if (REMOVE_FLAGGED){
this_data$dsm_medianRTc_ema_mean_postQC_reversed = -1*this_data$dsm_medianRTc_ema_mean_postQC
} else {
this_data$dsm_medianRTc_ema_mean_reversed = -1*this_data$dsm_medianRTc_ema_mean
}
#this_data$gradcpt_medianRTc_ema_mean_reversed = -1*this_data$gradcpt_medianRTc_ema_mean
age_data = NULL
for (i in 1:length(vars2get)){
this_outcome = vars2get[i]
tmp = this_data[c(this_outcome, 'demo_age')]
tmp[this_outcome] = scale(tmp[this_outcome])
tmp$outcome = names4vars[i]
names(tmp) = c('performance', 'age', 'outcome')
if (grepl('crt|CRT', this_outcome)){
tmp$linetype = '2'
} else {
tmp$linetype = '1'
}
age_data = rbind(age_data, tmp)
}
age_data$outcome = age_data$outcome = factor(age_data$outcome, levels = all_factor_levels)
# if (v == 1){#if ema
#   age_data$outcome = factor(age_data$outcome, levels = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc'))
# } else {#in baseline
#   age_data$outcome = factor(age_data$outcome, levels = names4vars)
# }
age_data$age_z = scale(age_data$age)
z20 = unique(age_data$age_z[age_data$age == 20])
z30 = unique(age_data$age_z[age_data$age == 30])
z80 = z20 + 6*(z30-z20)
z70 = z20 + 5*(z30-z20)
z75 = z20 + 5.5*(z30-z20)
z85 = z80 + .5*(z30-z20)
z18 = z20 - .2*(z30-z20)
breaks = seq(z20, z80, z30-z20)
#axes limits
if (s == 1){
ylim = c(-2, 1.5)
xlim = c(z18, z85)
} else if (s == 2){
ylim = c(-2, 1.5)
xlim = c(z18, z75)
}
#xlabel
if (v == 1){
xlab = 'Age'
this_title = ''
} else {
xlab = ''
this_title = this_sample
}
age_plots[[plot_count]] = ggplot(age_data, aes(x=age_z, y=performance, color = outcome, linetype = linetype)) +
ggtitle(this_title) +
ggpmisc::stat_correlation(size = 2.6,
label.x = 0.4, aes(label = paste0(after_stat(cor.label), "*\", \"*",
ifelse(after_stat(p.value) < .001, "***",
ifelse(after_stat(p.value) < .01, "**",
ifelse(after_stat(p.value) < .05, "*", ""))))),
small.r = T, small.p = T, p.digits = 2) +
geom_smooth(fill = 'lightgray', method = "lm", level = .95, se = F) +
theme(plot.title = element_text(hjust = 0.5, size = 11),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.title = element_blank(),
axis.text.x = element_text(size=9),
axis.text.y = element_text(size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.line.y = element_line(colour = "black"), axis.line.x = element_line(colour = "black")) +
xlab(xlab) +
#scale_colour_discrete(drop = FALSE) +
scale_color_manual(values=color_options, drop = FALSE) +
scale_linetype_manual(values = c(1, 2), drop = FALSE) +
coord_fixed(ylim = ylim, xlim = xlim) +
scale_x_continuous(breaks = breaks, labels =c(20,30,40,50,60,70,80)) +
ylab(ylab) + guides(linetype = "none")
}
}
(age_plots[[2]] + age_plots[[4]]) / (age_plots[[1]] + age_plots[[3]]) + plot_layout(guides = "collect") & theme(legend.position = "right")
age_plots = list()
plot_count = 0
all_factor_levels = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
for (s in 1:length(samples)){
this_sample = samples[s]
this_data = subject_data[[this_sample]]
for (v in 1:2){ #separate for EMA and baseline
plot_count = plot_count + 1
if (this_sample == 'MoodCog' & v == 1){ #moodcog EMA
if (REMOVE_FLAGGED){
vars2get = c('mot_correct_ema_mean_postQC', 'dsm_medianRTc_ema_mean_postQC_reversed', 'gradcpt_dprime_ema_mean_postQC', 'crt_medianRTc_ema_mean_postQC_reversed')
} else {
vars2get = c('mot_correct_ema_mean', 'dsm_medianRTc_ema_mean_reversed', 'gradcpt_dprime_ema_mean', 'crt_medianRTc_ema_mean_reversed')
}
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc')
ylab = ' \n '
} else if (this_sample == 'MoodCog' & v == 2){ #moodcog baseline
vars2get = c('mot_correct', 'dsm_medianRTc_reversed', 'gradcpt_dprime', 'crt_medianRTc_reversed', 'vocab_accuracy')
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
ylab = ' \n '
} else if (this_sample == 'GluCog' & v == 1){ #glucog ema
dsc_rename = which(grepl('dsc_', names(this_data)))
names(this_data)[dsc_rename] = gsub('dsc_', replacement = 'dsm_', names(this_data)[dsc_rename])
if (REMOVE_FLAGGED){
vars2get = c('mot_correct_ema_mean_postQC', 'dsm_medianRTc_ema_mean_postQC_reversed', 'gradcpt_dprime_ema_mean_postQC')
} else {
vars2get = c('mot_correct_ema_mean', 'dsm_medianRTc_ema_mean_reversed', 'gradcpt_dprime_ema_mean')
}
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime')
ylab = 'EMA\nStandardized Performance'
}  else if (this_sample == 'GluCog' & v == 2){ #glucog baseline
vars2get = c('mot_correct', 'dsm_medianRTc_reversed', 'gradcpt_dprime', 'crt_medianRTc_reversed', 'vocab_accuracy')
names4vars = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc', 'Vocabulary Accuracy')
ylab = 'Baseline\nStandardized Performance'
}
#reverse score RT outcomes for calculating correlations
this_data$crt_medianRTc_reversed = -1*this_data$crt_medianRTc
this_data$dsm_medianRTc_reversed = -1*this_data$dsm_medianRTc
if (this_sample == 'MoodCog'){
if (REMOVE_FLAGGED){
this_data$crt_medianRTc_ema_mean_postQC_reversed = -1*this_data$crt_medianRTc_ema_mean_postQC
} else {
this_data$crt_medianRTc_ema_mean_reversed = -1*this_data$crt_medianRTc_ema_mean
}
}
if (REMOVE_FLAGGED){
this_data$dsm_medianRTc_ema_mean_postQC_reversed = -1*this_data$dsm_medianRTc_ema_mean_postQC
} else {
this_data$dsm_medianRTc_ema_mean_reversed = -1*this_data$dsm_medianRTc_ema_mean
}
#this_data$gradcpt_medianRTc_ema_mean_reversed = -1*this_data$gradcpt_medianRTc_ema_mean
age_data = NULL
for (i in 1:length(vars2get)){
this_outcome = vars2get[i]
tmp = this_data[c(this_outcome, 'demo_age')]
tmp[this_outcome] = scale(tmp[this_outcome])
tmp$outcome = names4vars[i]
names(tmp) = c('performance', 'age', 'outcome')
if (grepl('crt|CRT', this_outcome)){
tmp$linetype = '2'
} else {
tmp$linetype = '1'
}
age_data = rbind(age_data, tmp)
}
age_data$outcome = age_data$outcome = factor(age_data$outcome, levels = all_factor_levels)
# if (v == 1){#if ema
#   age_data$outcome = factor(age_data$outcome, levels = c('MOT Accuracy', 'DSM medianRTc', 'GradCPT dprime', 'CRT medianRTc'))
# } else {#in baseline
#   age_data$outcome = factor(age_data$outcome, levels = names4vars)
# }
age_data$age_z = scale(age_data$age)
z20 = unique(age_data$age_z[age_data$age == 20])
z30 = unique(age_data$age_z[age_data$age == 30])
z80 = z20 + 6*(z30-z20)
z70 = z20 + 5*(z30-z20)
z75 = z20 + 5.5*(z30-z20)
z85 = z80 + .5*(z30-z20)
z18 = z20 - .2*(z30-z20)
breaks = seq(z20, z80, z30-z20)
#axes limits
if (s == 1){
ylim = c(-2, 1.5)
xlim = c(z18, z85)
} else if (s == 2){
ylim = c(-2, 1.5)
xlim = c(z18, z75)
}
#xlabel
if (v == 1){
xlab = 'Age'
this_title = ''
} else {
xlab = ''
this_title = this_sample
}
age_plots[[plot_count]] = ggplot(age_data, aes(x=age_z, y=performance, color = outcome, linetype = linetype)) +
ggtitle(this_title) +
ggpmisc::stat_correlation(size = 2.6,
label.x = 0.4, aes(label = paste0(after_stat(cor.label),
ifelse(after_stat(p.value) < .001, "***",
ifelse(after_stat(p.value) < .01, "**",
ifelse(after_stat(p.value) < .05, "*", " "))))),
small.r = T) +
geom_smooth(fill = 'lightgray', method = "lm", level = .95, se = F) +
theme(plot.title = element_text(hjust = 0.5, size = 11),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.title = element_blank(),
axis.text.x = element_text(size=9),
axis.text.y = element_text(size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.line.y = element_line(colour = "black"), axis.line.x = element_line(colour = "black")) +
xlab(xlab) +
#scale_colour_discrete(drop = FALSE) +
scale_color_manual(values=color_options, drop = FALSE) +
scale_linetype_manual(values = c(1, 2), drop = FALSE) +
coord_fixed(ylim = ylim, xlim = xlim) +
scale_x_continuous(breaks = breaks, labels =c(20,30,40,50,60,70,80)) +
ylab(ylab) + guides(linetype = "none")
}
}
(age_plots[[2]] + age_plots[[4]]) / (age_plots[[1]] + age_plots[[3]]) + plot_layout(guides = "collect") & theme(legend.position = "right")
a = .001
paste0("r = .01",
ifelse(a < .001, "***",
ifelse(a < .01, "**",
ifelse(a < .05, "*", " ")))))
paste0("r = .01",
ifelse(a < .001, "***",
ifelse(a < .01, "**",
ifelse(a < .05, "*", " "))))
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
rmarkdown::render_site("www")
